Datastructuur opdelen in files (classes)
Goede README, duidelijk voor iemand die niks van het project weet
meer dingen in init, moeten dingen gebeuren bij aanmaken class. laat een huis weten of hij al geplaatst is.
Alles in classes
.

Moeten we voor iedere huizenvariant (20, 40, 60) een ander algoritme maken?
Voor iedere variant een optimaal werkend algoritme die op alle varianten toepasbaar is
Is de vrijstand ook diagonaal?
Ja, dus niet alleen rechte hoeken
In hoeverre moet de oplossing optimaal zijn? Is de meest optimale oplossing een must?
Beetje van beide, bedenk een paar leuke algoritmes met redelijke oplossingen
Voor de matrix, is het de bedoeling dat we de grid area x2 doen. Dit omdat twee huisvormen een diepte van 7.5m en 10.5m hebben en je kan niet indexen op decimale cijfers.
Mogen we gebruik van extra ruimtes in decimalen en levert dat ook wat op?
Ja, mogen we zelf weten, is wel optimaler als je het wel doet

Restricties:

- Genoeg verplichte vrijstand tussen objecten, ook van de grens van het grondgebied

- Meeste vrijstand voor de grootste/duurste huizen (maisons)

- Verplichte vrijstand verschillende soorten huizen hetzelfde cijfer geven.


Mogelijke datastructuur:
Formule om afstand tot alle grenzen te bepalen. Hierdoor weet je de locatie van het huis.
Vergelijken afstanden van verschillende huizen om te zien of ze in elkaar staan.

Idee algoritme:
Greedy - Zet steeds één huis neer en kijk waar dit huis de meeste vrijstand heeft, houd geen rekening met huizen die al geplaatst zijn.

Vragen Assistent Meeting 3:
- Is greedy goed?
- Handmatig plaatsen eerste huizen?
- Is datastructuur goed?

comments:
readme niet compleet en niet zoals het eruit moet zien
.gitignore (voor gecompilede bestanden)
main.py niet dieper dan laag 1
houses een bestand
comments en style guide
ipv lijst, een classe met een lijst
visualisatie afmaken
functie schrijven die overlap checkt/voorkomt
eerst random zonder overlap algoritme, dan greedy.

Meeting 4:
- 3 punten voor infra- en datastructuur
- CSV bestand voor kenmerken van huizen maken, zodat het niet meer op twee plekken staat (floorplan en houses).
- In greedy losse functies maken, het is nu een te groot blok. Bijv. loopen over de coordinaten heen.
- Read me moet uitgebreider worden (wat gebeurt er als je runt, wat staat er waar?).
- Twee if statements van boundary en overap kunnen weg, en dan doe je het in findclosesthouse.

Meeting 5:
- Hillclimber mag niet zelf randomalgoritme aanroepen, hij krijgt een oplossing mee.
Dus je kunt doen hillclimber(randomalgoritme)
- While loop in hillclimber moet een forloop worden.
- In de readme moet ook staan wat je precies aan moet roepen om te runnen.
- Main doet nooit zelf wat, hij heeft alleen functies staan die aangeroepen worden om
ergens anders uitgevoerd te worden.
- Bij floorplan moet er direct gekeken worden wat de totalvalue is. Bij het plaatsen van een
huis moet eigenlijk automatisch deze waarde geupdated worden.
- Greedy kun je ook maken dat hij niet kijkt naar wat voor dat huis de beste plek is,
maar wat voor de kaart de beste plek is.
- Als je random runt, wil je niet de hele tijd die totale waarde updaten, want dat is
dan niet nodig, dat wil je pas op het einde. Dus wil je meeggeven dat hij dat niet elke
keer moet doen. Dan moet hij ook weten dat de totalvalue van dat moment niet goed is.
- In floorplan kun je ook die randomhouse functie doen, dat hij een random house returnt
als je erom vraagt.


Meeting 6:
ANDERE ALGORITMEN:
GENETISCHE ALGORITMEN
POPULATION ALGORITMEN
Particle swarm / swarm algoritmen (ant colony)

Meeting 7:
Visualisatie: water blauw, types huizen dezelfde kleur.
Readme in code map
Results (csv) in code en naam map code veranderen
Hillclimber:
  housemove functie opdelen in kleinere functies
  draaien huizen, swaps
  Simulated annealing: kan ook voor experimentatie gebruikt worden. Kans voor acceptatie uit papers halen.
Experimentatie:
Verschillende probabilities met hillclimber: 20% swap 30% rotate 50% movement, en andere probabilities uitproberen
Documenteren van een experiment:
  Bijvoorbeeld random 1000x runnen en dan resultaten bespreken
Constraints case weghalen om te kijken of het interessanter wordt, zoals huisverdeling maison, bungalow, eengezinswoning.
 

Hillclimber opschonen --> Nathalie
Docstrings aanpassen --> Roos (wat wordt meegegeven en wat wordt de output)
Hillclimber iteraties meegeven --> Done
In Greedy: The coordinates that are impossible then get removed form the list.  Still needs a way to check if no house is in another houses mandatory freespace.
README (meer to the point, minder verhalend. Python 3.6 is 3.6.6. HTML en visualisaties) --> Roos
Requirements (lijstje met alle modules en welke versies (pip freeze)) --> Roos
Particle Swarm --> Nathalie

Presentatie:
Onszelf voorstellen
Niet datastructuur vertellen, alleen coordinaten
Alle algoritmes uitspreken
Particle Swarm niet te uitgebreid
Conclusies noemen met beste waardes
Vergelijkingstabel omdraaien
Histogram met dingen uit de vergelijkingstabel
Percentages van verbeteringen 
Plaatjes in ppt
State space
Vervolgonderzoek
Opzet van wetenschappenlijk onderzoek
Netjes gekleed

